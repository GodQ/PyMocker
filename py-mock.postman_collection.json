{
	"info": {
		"_postman_id": "cbfefb0b-f929-44c6-8010-6d060e67815f",
		"name": "py-mock",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "mgmt",
			"item": [
				{
					"name": "create mock_server 001",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.globals.set(\"mock_port\", pm.response.json().mock_port);",
									"pm.globals.set(\"access_url\", pm.response.json().access_url);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"mock_server_id\": \"001\",\n    \"target_url\": \"https://www.httpbin.org\",\n    \"mock_rules\": [\n        {\n            \"method\": \"PUT\",\n            \"path\": \".*put.*\",\n            \"response_status\": 201,\n            \"response_data\": {\n                \"error\": \"Rewrite put response!!!\"\n            },\n            \"response_headers\": {\n                \"HHH\": \"Mock header\"\n            }\n        },\n        {\n            \"method\": \"POST\",\n            \"path\": \".*/post.*\",\n            \"response_status\": 201,\n            \"response_data\": {\n                \"info\": \"hit post!!\"\n            }\n        },\n        {\n            \"method\": \"POST\",\n            \"path\": \".*/script.*\",\n            \"response_status\": 201,\n            \"response_data\": {\n                \"info\": \"hit script!!\"\n            },\n            \"python_script\": \"if request.params['action']=='login' and request.data['user']=='lucy': response.data['token']='token12345'\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/mock_servers",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"mock_servers"
							]
						}
					},
					"response": []
				},
				{
					"name": "create mock_server 002",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.globals.set(\"mock_port\", pm.response.json().mock_port);",
									"pm.globals.set(\"access_url\", pm.response.json().access_url);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"mock_server_id\": \"002\",\n    \"target_url\": \"http://www.httpbin.org\",\n    \"mock_port\": \"8080\",\n    \"mock_web_port\": \"8082\",\n    \"mock_rules\": [\n        {\n            \"method\": \"PUT\",\n            \"path\": \".*put.*\",\n            \"response_status\": 201,\n            \"response_data\": {\n                \"error\": \"Rewrite put response!!!\"\n            },\n            \"response_headers\": {\n                \"HHH\": \"Mock header\"\n            }\n        },\n        {\n            \"method\": \"POST\",\n            \"path\": \".*/post.*\",\n            \"response_status\": 201,\n            \"response_data\": {\n                \"info\": \"hit post!!\"\n            }\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/mock_servers",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"mock_servers"
							]
						}
					},
					"response": []
				},
				{
					"name": "update mock_server 001 rules",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"mock_rules\": [\n        {\n            \"method\": \"PUT\",\n            \"path\": \".*put.*\",\n            \"response_status\": 202,\n            \"response_data\": {\n                \"error\": \"Updated put response!!!\"\n            },\n            \"response_headers\": {\n                \"HHH\": \"Mock header updated\"\n            }\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/mock_servers/001",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"mock_servers",
								"001"
							]
						}
					},
					"response": []
				},
				{
					"name": "start mock_server 001",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/mock_servers/001/start",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"mock_servers",
								"001",
								"start"
							]
						}
					},
					"response": []
				},
				{
					"name": "stop mock_server 001",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/mock_servers/001/start",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"mock_servers",
								"001",
								"start"
							]
						}
					},
					"response": []
				},
				{
					"name": "list mock servers",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/mock_servers",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"mock_servers"
							],
							"query": [
								{
									"key": "show_rules",
									"value": "true",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get mock server 001",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/mock_servers/001",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"mock_servers",
								"001"
							]
						}
					},
					"response": []
				},
				{
					"name": "get mock server rules 001",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/mock_servers/001/mock_rules",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"mock_servers",
								"001",
								"mock_rules"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete mock server 001",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/mock_servers/001",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"mock_servers",
								"001"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete mock server 002",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/mock_servers/002",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"mock_servers",
								"002"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "mock server",
			"item": [
				{
					"name": "get  mock_rules",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{access_url}}/mock_rules?a=1&b=2",
							"host": [
								"{{access_url}}"
							],
							"path": [
								"mock_rules"
							],
							"query": [
								{
									"key": "a",
									"value": "1"
								},
								{
									"key": "b",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "update mock rules",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"mock_rules\": [\n        {\n            \"method\": \"PUT\",\n            \"path\": \".*put.*\",\n            \"response_status\": 202,\n            \"response_data\": {\n                \"error\": \"Updated put response!!!\"\n            },\n            \"response_headers\": {\n                \"HHH\": \"Mock header updated\"\n            }\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{access_url}}/mock_rules",
							"host": [
								"{{access_url}}"
							],
							"path": [
								"mock_rules"
							]
						}
					},
					"response": []
				},
				{
					"name": "get  mock_records",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{access_url}}/mock_records",
							"host": [
								"{{access_url}}"
							],
							"path": [
								"mock_records"
							]
						}
					},
					"response": []
				},
				{
					"name": "mock put",
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{access_url}}/put?a=1&b=2",
							"host": [
								"{{access_url}}"
							],
							"path": [
								"put"
							],
							"query": [
								{
									"key": "a",
									"value": "1"
								},
								{
									"key": "b",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "mock post /post  only post",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{access_url}}/post",
							"host": [
								"{{access_url}}"
							],
							"path": [
								"post"
							]
						}
					},
					"response": []
				},
				{
					"name": "mock get by python script",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user\": \"lucy\",\n    \"password\": \"111\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{access_url}}/script?action=login",
							"host": [
								"{{access_url}}"
							],
							"path": [
								"script"
							],
							"query": [
								{
									"key": "action",
									"value": "login"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "proxy get",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{access_url}}/get?a=1&b=x",
							"host": [
								"{{access_url}}"
							],
							"path": [
								"get"
							],
							"query": [
								{
									"key": "a",
									"value": "1"
								},
								{
									"key": "b",
									"value": "x"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "alp-test",
			"item": [
				{
					"name": "create mock_server 003",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.globals.set(\"mock_port\", pm.response.json().mock_port);",
									"pm.globals.set(\"access_url\", pm.response.json().access_url);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"mock_server_id\": \"alp-test\",\n    \"mock_url\": \"https://test0.alp-decc.hs-portal.eng.vmware.com\",\n    \"mock_rules\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/mock_servers",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"mock_servers"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}